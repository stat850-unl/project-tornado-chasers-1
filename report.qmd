---
format: html
editor: visual
---

```{r, eval = F}
# This code chunk contains code to install all of the dependencies
# necessary to compile and run your report, using if-statements to
# reduce install time for unnecessary code.
# It should be set to eval = F by default, so you aren't installing
# software on someone's computer without their consent.

# This works for packages that are on CRAN
if (!"dplyr" %in% installed.packages()) {
  install.packages("dplyr")
}
if (!"remotes" %in% installed.packages()) {
  install.packages("remotes")
}

# This is how to do it for a package that's only on github
if (!"emo" %in% installed.packages()) {
  remotes::install_github("hadley/emo")

```

```{r}

```

## Introduction

A tornado is a rapidly rotating column of air that extends from a thunderstorm to the ground, forming a funnel-shaped cloud, known as a tornado vortex ([Tornadoes.(n.d.)](https://www.nssl.noaa.gov/research/tornadoes/)). These violent windstorms are characterized by their destructive power, often causing severe damage to structures, vehicles, and natural environments. So this most destructive and fascinating natural phenomena that occur in the United States, with the power to wreak havoc on communities, devastate landscapes, and claim lives. They are often referred to as nature's most violent storms due to their ferocity and unpredictability. In the USA, tornadoes have long been a subject of both fear and awe, prompting researchers, meteorologists, and emergency response teams to seek a deeper understanding of these formidable weather events.

The interest in exploring this extensive tornado data set arises from the profound impact that tornadoes have on American society and the natural environment. Tornadoes are a recurring and unpredictable threat, causing significant economic losses and, more importantly, putting human lives at risk. As a researcher, I am driven by the need to better understand the behavior and patterns of tornadoes to mitigate their destructive potential and improve our ability to predict and respond to them.

The opportunity to delve into a comprehensive data set, spanning more than seven decades, is both exciting and promising. It allows for a deep exploration of trends, anomalies, and potential patterns in tornado occurrence and behavior, which can inform disaster preparedness, risk assessment, and policy development.

## Data

### Source

The data source for the project is comes from - [TidyTuesday Archive](https://github.com/rfordatascience/tidytuesday) data project, and the data set used is the [Tornado Data](https://www.spc.noaa.gov/wcm/data/1950-2022_actual_tornadoes.csv).

```{r, echo = F,message = F, warning = F}

library(tidyverse)

#read the data

tornado <-read.csv("https://www.spc.noaa.gov/wcm/data/1950-2022_actual_tornadoes.csv")


```

### Description

This data set provides comprehensive information about tornadoes, including various attributes such as tornado numbers, years, months, days, dates, times, geographical coordinates, magnitudes, injuries, fatalities, property losses, and more. The data offers insights into the characteristics and impacts of tornadoes that have occurred from 1950 to 2022.

It is sourced from NOAA's National Weather Service Storm Prediction Center Severe Weather Maps, Graphics, and Data Page ([Storm Prediction](https://www.spc.noaa.gov/wcm/)).This offers a rich resource for the analysis and study of tornado occurrences and their impacts, enabling researchers and meteorologists to gain insights into the patterns and characteristics of tornadoes spanning over seven decades.

## Project Goals

The [Tornado Data](https://www.spc.noaa.gov/wcm/data/1950-2022_actual_tornadoes.csv) set from NOAA, covering the years 1950 to 2022, is fascinating because it holds the potential to reveal valuable insights.

The goals of this project are to utilize this data to explore and analyze several key aspects related to tornado occurrences in the United States. Here are the specific goals and the intriguing subjects we hope to investigate.

## Methods

libraries

```{r}
library(tidyverse)
library(stringr)
library(tmap)
library(ggplot2)
library(usmap)
library(showtext)
library(plotly)
library(leaflet)
library(dplyr)
library(sf)
library(maps)
library(ggplot2)
library(patchwork)

```

### Data Cleaning and Pre-processing

**1. Conduct data cleaning to handle missing values, outliers, and inconsistencies in the tornado data set, ensuring that the data is of high quality for analysis.**

-   Print the data information

```{r, echo = F,message = F, warning = F}
#print the data information
str(tornado)

```

The data.frame "tornado" has 29 variables and 68,701 observations.

-   Check for missing values in the data set.

```{r}
# Check for missing values in each column
missing_values <- colSums(is.na(tornado))

# Print the results
print(missing_values)

```

It looks like the output indicates that there are no missing values in any of the columns of "tornado" data frame. Each column has a count of 0, meaning there are no missing values.

-   Identify and Handling Inconsistent Values

Get the summary of the data set

```{r}
summary(tornado)
```

some potential issues or considerations based on the summary:

I. "mag" (Magnitude) Column:

The minimum value is -9, which may be inconsistent since magnitude is typically a non-negative value.

Identify rows which have negative magnitude.

```{r}
# Identify rows where magnitude is negative

negative_mag_rows <- tornado[tornado$mag < 0, ] 
mag_neg<-(negative_mag_rows[, c("om", "yr", "mo", "dy", "mag","fc")])


num_rows <- nrow(mag_neg)

print(paste('No of rows where magnitude is negative:', num_rows))


```

Identify years where magnitude is negative.

```{r}
# Identify years where magnitude is negative

print(unique(negative_mag_rows$yr))

```

These rows seem to represent tornadoes from year 2016-2022 where the original magnitude ("mag") is listed as -9, and the "fc" value is set to 0, according to the modification scheme (ref) indicating that no modification was made for these tornadoes.

This output aligns where tornadoes with a F-scale rating of -9 were not modified based on property loss and path length criteria ([Noaa](https://www.spc.noaa.gov/wcm/#data)) / [Info](https://www.spc.noaa.gov/wcm/OneTor_F-scale-modifications.pdf).

II. "date" and "time" Columns:

Confirm that the "date" and "time" columns are correctly formatted as dates and times, respectively.

```{r}
# Convert "date" to Date class
tornado$date <- as.Date(tornado$date, format="%Y-%m-%d")

# Convert "time" to POSIXct class
tornado$time <- as.POSIXct(tornado$time, format="%H:%M:%S")
head(tornado$time)
```

III. "st" Column:

Create a separate column called "state_full" which have the full state name.

```{r}

# Create a mapping between state abbreviations and full names
state_mapping <- c("AL" = "Alabama", "AK" = "Alaska", "AZ" = "Arizona", "AR" = "Arkansas", "CA" = "California",
                   "CO" = "Colorado", "CT" = "Connecticut", "DE" = "Delaware", "FL" = "Florida", "GA" = "Georgia",
                   "HI" = "Hawaii", "ID" = "Idaho", "IL" = "Illinois", "IN" = "Indiana", "IA" = "Iowa",
                   "KS" = "Kansas", "KY" = "Kentucky", "LA" = "Louisiana", "ME" = "Maine", "MD" = "Maryland",
                   "MA" = "Massachusetts", "MI" = "Michigan", "MN" = "Minnesota", "MS" = "Mississippi", "MO" = "Missouri",
                   "MT" = "Montana", "NE" = "Nebraska", "NV" = "Nevada", "NH" = "New Hampshire", "NJ" = "New Jersey",
                   "NM" = "New Mexico", "NY" = "New York", "NC" = "North Carolina", "ND" = "North Dakota", "OH" = "Ohio",
                   "OK" = "Oklahoma", "OR" = "Oregon", "PA" = "Pennsylvania", "RI" = "Rhode Island", "SC" = "South Carolina",
                   "SD" = "South Dakota", "TN" = "Tennessee", "TX" = "Texas", "UT" = "Utah", "VT" = "Vermont",
                   "VA" = "Virginia", "WA" = "Washington", "WV" = "West Virginia", "WI" = "Wisconsin", "WY" = "Wyoming")

# Add a new column with full state names
tornado$state_full <- state_mapping[tornado$st]

# Print the first few rows to verify
head(tornado[, c("st", "state_full")])
```

### Tornado Trends and Patterns

**1. Examine long-term trends in tornado frequency and intensity, and identify any significant changes over the decades. Are tornadoes becoming more frequent or intense over time.**

Steps to examine long-term trends in tornado frequency and intensity and identify any significant changes over the decades.

I. Subset the Data for Relevant Variables:

Focus on the variables that are crucial for examining tornado frequency and intensity trends. These may include the year (`yr`), month (`mo`), magnitude (`mag`), and other relevant variables.

```{r}
# Subset the data
tornado_subset <- tornado[, c("yr", "mo", "mag")]

head(tornado_subset)

```

II. Aggregate Tornado Frequency by Year:

Calculate the total number of tornadoes per year to examine the frequency trend.

```{r}
# Aggregate tornado frequency by year
tornado_frequency <- aggregate(mag ~ yr, data = tornado_subset, FUN = length)

head(tornado_frequency)


```

III. Plot Tornado Frequency Over Time:

Create a plot to visualize the trend in tornado frequency over the years.

```{r}
# Fit linear trend line for tornado frequency
trend_frequency <- lm(mag ~ yr, data = tornado_frequency)

# Plot tornado frequency over time with trend lines
plot(tornado_frequency$yr, tornado_frequency$mag, type = "l", xlab = "Year", ylab = "Tornado Frequency", main = "Tornado Frequency Over Time with Trend Line")
abline(trend_frequency, col = "red")

```

IV. Explore Tornado Intensity Trends:

Examine trends in tornado intensity (magnitude) over time. And calculate the average magnitude per year.

```{r}
# Aggregate average tornado magnitude by year
tornado_intensity <- aggregate(mag ~ yr, data = tornado_subset, FUN = mean)

head(tornado_intensity)


```

IV. Plot Tornado Intensity Over Time:

Visualize the trend in tornado intensity over the years.

Woking on....

```{r, eval=FALSE}
# Fit linear trend line for tornado intensity (excluding mag == -9)


total_impact_by_mag <- tornado %>%
  filter(mag != -9) %>%
  group_by(yr)%>%
 summarise(mean_mag = mean(mag))
#total_impact_by_mag
trend_intensity <- lm(mean_mag ~ yr, data = total_impact_by_mag)

# Plot tornado intensity over time
plot(yr, mean_mag, type = "l", xlab = "Year", ylab = "Tornado Magnitude", main = "Tornado Intensity Over Time with Trend Line")
abline(trend_intensity, col = "red")


```

VI. Interpret the Results:

**The tornado frequency over the years:**

The increasing trend in tornado frequency from 1950 to 2022, is a positive slope of the trend line in the plot, suggests a general rise in the number of reported tornadoes over the years.

The pattern (zig-zag)indicate some variability in tornado frequency from year to year. This could be influenced by various factors, such as natural climate variability, advancements in technology and reporting, or other external factors.

**The tornado intensity over the years:**

Woking on....

**2. Investigate seasonal and regional variations in tornado occurrences. Are there particular months or states with higher tornado activity.**

Steps to investigate seasonal and regional variations in tornado occurrences using interactive maps.

I. Prepare Data for Mapping:

Subset the data to include relevant variables for mapping, such as latitude (`slat` and `elat`), longitude (`slon` and `elon`), and the month of occurrence (`mo`).

```{r}
# Subset the data
tornado_map_data <- tornado[, c("slat", "slon", "elat", "elon", "mo","st")]

head(tornado_map_data)


```

II. Create Seasonal and Regional Aggregations:

Count tornado occurrences by month and region (state).

```{r}
# Count tornado occurrences by month

tornado$mo <- factor(tornado$mo, levels = 1:12, labels = month.abb)


tornado_monthly_counts  <- tornado_map_data %>%
  group_by(mo) %>%
  summarise(total_tornadoes = n())

print(tornado_monthly_counts )

```

Count tornado occurrences by region (state).

```{r}

# Calculate the total number of tornadoes by state
tornado_state_counts  <- tornado_map_data  %>%
  group_by(st) %>%
  summarise(total_tornadoes = n())%>%
   arrange(desc( total_tornadoes))

print(tornado_state_counts)

```

III. Create Interactive Maps and plots:

Create interactive plot for monthly tornado variation.

```{r,warning = F}

#library(plotly)

plot_ly(data = tornado_monthly_counts , x = ~mo, y = ~total_tornadoes, type = "scatter", mode = "lines+markers", 
        name = "Tornado Count", line = list(color = "blue")) %>%
  layout(title = "Tornado Occurrences by Month",
         xaxis = list(title = "Month", tickmode = "array", tickvals = 1:12, ticktext =month.name),
         yaxis = list(title = "Tornado Count"))

```

Create interactive map using `leaflet` to visualize state-wise tornado count

```{r, warning=FALSE}

library(leaflet)
library(dplyr)
library(sf)
library(usmap)
library(maps)

# Create a summary data frame with tornado counts by state
tornado_counts <- tornado %>%
  group_by(state_full) %>%
  summarise(tornado_count = n())

# Load a data frame mapping state names to state abbreviations
state_abbreviations <- data.frame(
  state_full = state.name,
  state_abbr = state.abb
)

# Merge tornado counts with state abbreviations
tornado_counts <- merge(tornado_counts, state_abbreviations, by = "state_full")

# Load U.S. state map data
us_states <- st_as_sf(map("state", plot = FALSE, fill = TRUE))

# Check and fix invalid geometries
us_states1 <- st_make_valid(us_states)
# Convert 'ID' column in 'us_states1' to lowercase
us_states1$ID <- tolower(us_states1$ID)

# Convert 'state_full' column in 'tornado_counts' to lowercase
tornado_counts$state_full <- tolower(tornado_counts$state_full)

# Merge tornado counts with U.S. state map (case-insensitive)
us_states <- merge(us_states1, tornado_counts, by.x = "ID", by.y = "state_full", all.x = TRUE)


# Create an interactive map
# Create an interactive map with a different fill color
leaflet(data = us_states) %>%
  addProviderTiles("CartoDB.Voyager") %>%
  addPolygons(
    fillColor = ~colorQuantile("YlOrRd", us_states$tornado_count)(us_states$tornado_count),
    fillOpacity = 0.7,
    highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE),
    label = ~paste(us_states$ID,
                   "Tornado Count:", tornado_count)
  ) %>%
  addLegend(
    position = "bottomright",
    pal = colorQuantile("YlOrRd", us_states$tornado_count),
    values = us_states$tornado_count,
    title = "Tornado Count",
    opacity = 0.7
  ) %>%
  addMiniMap(toggleDisplay = TRUE)


```

IV. Interpret the Results:

In this analysis, we explore the seasonal and regional patterns of tornado occurrences in the data set spanning from 1950 to 2022. The objective is to identify if there are specific months or states that exhibit higher tornado activity. To understand the seasonal variations, we aggregate tornado occurrences by month and observe the distribution.

**Seasonal Patterns:**

The monthly aggregation of tornado occurrences reveals the following insights:

March (mo = 3): March exhibits a substantial increase in tornado occurrences with 4,748 tornadoes. This could be attributed to the transition from winter to spring, creating favorable conditions for tornado formation.

April and May (mo = 4, 5): April and May experience the highest tornado activity, with 9,792 and 15,057 tornadoes, respectively. These months typically mark the peak of tornado season, characterized by the convergence of warm and cold air masses.

June (mo = 6): Tornado activity remains elevated in June with 12,615 tornadoes, indicating a continuation of favorable weather conditions for tornado formation.

July to December (mo = 7-12): Tornado occurrences gradually decrease from July onwards, reaching the lowest point in December. This decline is consistent with the typical seasonal patterns, where tornadoes are less frequent in the colder months.

**Regional Patterns:**

The regional analysis, based on the total number of tornadoes by state, provides insights into the distribution of tornado activity across different states:

Texas (TX): Texas (TX) leads in tornado occurrences with 9,267 tornadoes, reinforcing its reputation as a tornado-prone state.

Kansas (KS) and Oklahoma (OK): Kansas and Oklahoma follow closely with 4,429 and 4,146 tornadoes, respectively. The central United States, often part of "Tornado Alley," demonstrates a high tornado frequency.

Florida (FL): Florida (FL) experiences significant tornado activity, recording 3,566 tornadoes. This suggests that tornadoes are not exclusive to the central plains but can also impact southeastern states.

Nebraska (NE) and Iowa (IA): Nebraska and Iowa have notable tornado occurrences, emphasizing the broader geographic distribution of tornado-prone regions.

**Combined Analysis**

The combined analysis of seasonal and regional patterns underscores the importance of understanding both temporal and spatial aspects of tornado occurrences. Tornadoes exhibit distinct seasonality, peaking in spring, while certain states consistently experience higher tornado activity throughout the year. This knowledge is crucial for implementing effective preparedness and mitigation strategies tailored to specific regions and times of heightened risk.

### Tornado Impact Assessment

**1. Assess the human impact of tornadoes by analyzing variables such as injuries, fatalities.**

I. Subset Data for Relevant Variables

```{r}
# Subset data for relevant variables
tornado_impact_subset <- tornado[, c("yr","state_full","st","mag", "inj", "fat", "loss", "closs","f1",
                                     "f2","f3","f4","stf")]

head(tornado_impact_subset)

#summary(tornado_impact_subset)
```

II. Identify tornado Injuries and Fatalities by year:

Summarize the total number of injuries and fatalities for each year.

```{r}

# Aggregate injuries and fatalities by year
total_impact_by_year <- aggregate(cbind(inj, fat) ~ yr, data = tornado_impact_subset, sum)
total_impact_by_year

```

Generate an interactive line plot to visualize the trends in fatalities and injuries over the years.

```{r}

library(plotly)


plotly_line_plot <- plot_ly() %>%
  add_lines(x = ~total_impact_by_year$yr, y = ~total_impact_by_year$inj, name = 'Injuries', line = list(color = 'blue')) %>%
  add_lines(x = ~total_impact_by_year$yr, y = ~total_impact_by_year$fat, name = 'Fatalities', line = list(color = 'red')) %>%
  layout(title = "Tornado Injuries and Fatalities Over Years",
         xaxis = list(title = "Year"),
         yaxis = list(title = "Count"),
         showlegend = TRUE,
         legend = list(x = 1, y = 1.1))

plotly_line_plot


```

III. Identify tornado Injuries and Fatalities by EF rating:

Summarize the total number of injuries and fatalities by magnitude (mag) while excluding the value -9 to get EF rating.

```{r}

# Aggregate injuries and fatalities by magnitude (excluding mag == -9)
total_impact_by_mag <- tornado_impact_subset %>%
  filter(mag != -9) %>%
  group_by(mag) %>%
  summarise(total_injuries = sum(inj), total_fatalities = sum(fat))
total_impact_by_mag

```

Generate an interactive bar plot to visualize the total injuries and fatalities for each EF rating.

```{r}

 library(tidyverse)
 library(plotly)

# Create a bar plot for injuries and fatalities by magnitude
plotly_bar_inj_fat <- ggplot(total_impact_by_mag, aes(x = factor(mag))) +
  geom_bar(aes(y = total_fatalities, fill = "Fatalities"), stat = "identity", position = "dodge", width = 0.7) +
  geom_bar(aes(y = total_injuries, fill = "Injuries"), stat = "identity", position = "dodge", width = 0.5) +
  labs(title = "Tornado Injuries and Fatalities by EF Rating",
       x = "EF Rating",
       y = "Count") +
  scale_fill_manual(values = c("blue", "red"), name = "Impact Type") +
  theme_minimal() +
  #theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  guides(fill = guide_legend(title = "Impact Type"))

# Convert ggplot to Plotly
plotly_bar_inj_fat  <- ggplotly(plotly_bar_inj_fat )

plotly_bar_inj_fat 


```

IV. Identify tornado Injuries and Fatalities by State and visualizing:

Count no of tornado Injuries and Fatalities by State and Calculate total human impact

```{r}
# Create a summary data frame with tornado Injuries and Fatalities by State 
total_impact_by_st <- tornado_impact_subset %>%
  group_by(state_full) %>%
  summarise(total_injuries = sum(inj), total_fatalities = sum(fat))

# Calculate total human impact by adding injuries and fatalities
total_impact_by_st <- total_impact_by_st %>%
  mutate(total_human_impact = total_injuries + total_fatalities)

total_impact_by_st
```

Create interactive map using `leaflet` to visualize state-wise tornado Injuries and Fatalities.

```{r, warning=FALSE}

 library(leaflet)
 library(dplyr)
 library(sf)
 library(usmap)
 library(maps)  

total_impact_by_st <- tornado_impact_subset %>%
  group_by(state_full) %>%
  summarise(total_injuries = sum(inj), total_fatalities = sum(fat))
total_impact_by_st <- total_impact_by_st %>%
  mutate(total_human_impact = total_injuries + total_fatalities)


state_abbreviations <- data.frame(
  state_full = state.name,
  state_abbr = state.abb
)


total_impact_by_st <- merge(total_impact_by_st, state_abbreviations, by = "state_full")

us_states <- st_as_sf(map("state", plot = FALSE, fill = TRUE))
us_states1 <- st_make_valid(us_states)
us_states1$ID <- tolower(us_states1$ID)
total_impact_by_st$state_full <- tolower(total_impact_by_st$state_full)

us_states <- merge(us_states1, total_impact_by_st, by.x = "ID", by.y = "state_full", all.x = TRUE)

leaflet(data = us_states) %>%
  addProviderTiles("CartoDB.Voyager") %>%
  addPolygons(
    fillColor = ~colorQuantile("YlOrRd", us_states$total_human_impact)(us_states$total_human_impact),
    fillOpacity = 0.7,
    highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE),
    label = ~paste(us_states$ID,
                   "Tornado Injuries:", us_states$total_injuries,
                   "Tornado Fatalities:", us_states$total_fatalities,
                   "Total Human Impact:",us_states$total_human_impact)
) %>%
  addLegend(
    position = "bottomright",
    pal = colorQuantile("YlOrRd", us_states$total_human_impact),
    values = us_states$total_human_impact,
    title = "Total Human Impact",
    opacity = 0.7
  ) 


  

```

V. Interpret the Results:

**Trends in Tornado Injuries and Fatalities Over the Years:**

The interactive line plot shows the trends in tornado injuries and fatalities over the years.

Both injuries and fatalities have seen fluctuations, with some years experiencing higher counts than others implies the variability, indicating that tornado impacts can vary from year to year.

The plot allows users to hover over data points to get specific counts for each year.

**Tornado Injuries and Fatalities by EF Rating:**

The interactive bar plot displays the total injuries and fatalities for each EF rating, excluding EF ratings with a value of -9.

EF4 tornadoes and EF3 tornadoes contribute significantly to total injuries and fatalities, highlighting the potential severity of these tornado categories.

Users can hover over the bars to see the specific counts for each EF rating.

**State-wise Tornado Injuries and Fatalities:**

The interactive map visualizes state-wise tornado injuries and fatalities.

It allows for a regional assessment of tornado impacts, helping identify areas that may be more prone to tornado-related injuries and fatalities.

Here visualize each state to view the tornado injuries and fatalities counts with a clear geographical representation.

**2. Assess the economic impact of tornadoes by analyzing variables such as property and crop losses.**

I. Subset Data for Relevant Variables:

Select variables related to economic impact, such as property losses (loss), crop losses (closs), and other relevant economic indicators.

```{r}
# Subset data for relevant economic impact variables
tornado_economic_subset <- tornado[, c("yr", "state_full", "st", "loss", "closs")]

head(tornado_economic_subset)

```

II. Aggregate Economic Impact by Year:

Calculate the total property and crop losses for each year to examine the overall economic impact.

```{r}

# Aggregate economic impact by year
total_economic_impact_by_year <- aggregate(cbind(loss, closs) ~ yr, data = tornado_economic_subset, sum)
total_economic_impact_by_year$total_loss_yr <- total_economic_impact_by_year$loss + total_economic_impact_by_year$closs
total_economic_impact_by_year

```

Create visualizations, using a line plots , to show the trends in property and crop losses over the years.

```{r}

# Create a line plot for economic impact over time
plot_economic_impact <- ggplot(total_economic_impact_by_year, aes(x = yr)) +
  geom_line(aes(y = log(loss + 1), color = "Property Loss"), alpha = 0.8) +
  geom_line(aes(y = log(closs + 1), color = "Crop Loss"), alpha = 0.8) +
  geom_line(aes(y = log(total_loss_yr+1), color = "Total Loss"), alpha = 0.8) +
  labs(title = "Tornado Economic Impact Over Time",
       x = "Year",
       y = "Losses",
       color = "Loss Type") +
  scale_color_manual(values = c("Property Loss" = "blue", "Crop Loss" = "green", "Total Loss" = "red")) +
  theme_minimal()

plot_economic_impact



```

III. Assess Economic Impact by State:

Calculate the total property and crop losses for each state and create new colmn for total loss to assess the economic impact on a regional level.

```{r}
# Aggregate economic impact by state with the sum of loss and closs
total_economic_impact_by_state <- aggregate(cbind(loss, closs) ~ state_full, data = tornado_economic_subset, sum)
total_economic_impact_by_state$total_loss <- total_economic_impact_by_state$loss + total_economic_impact_by_state$closs

total_economic_impact_by_state


```

visualizations the economic impact by state.

Identify top 10 states which have highest property loss.

```{r}
top_loss_states <- total_economic_impact_by_state[order(-total_economic_impact_by_state$loss), "state_full"][1:10]

top_loss_states
```

Identify top 10 states which have highest crop loss.

```{r}

top_closs_states <- total_economic_impact_by_state[order(-total_economic_impact_by_state$closs), "state_full"][1:10]

top_closs_states

```

Bar plots which have state-wise highest Property loss and Crop loss.

```{r}
 library(ggplot2)
 library(patchwork)


# highest property loss
top_loss_states <- total_economic_impact_by_state[order(-total_economic_impact_by_state$loss), "state_full"][1:10]

subset_loss <- total_economic_impact_by_state[total_economic_impact_by_state$state_full %in% top_loss_states, ]

loss_bar_plot <- ggplot(subset_loss, aes(x = reorder(state_full, -loss), y = loss)) +
  geom_bar(aes(fill = "Total Loss"), stat = "identity", position = "dodge", width = 0.7) +
  labs(title = "Top States with Highest Property Loss",
       x = "State",
       y = "Total Property Loss",
       fill = "Loss Type") +
  scale_fill_manual(values = c("Total Loss" = "blue")) +
  theme_minimal() +
  theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, hjust = 1))

# highest closs
top_closs_states <- total_economic_impact_by_state[order(-total_economic_impact_by_state$closs), "state_full"][1:10]

subset_closs <- total_economic_impact_by_state[total_economic_impact_by_state$state_full %in% top_closs_states, ]

closs_bar_plot <- ggplot(subset_closs, aes(x = reorder(state_full, -closs), y = closs)) +
  geom_bar(aes(fill = "Crop Loss"), stat = "identity", position = "dodge", width = 0.5) +
  labs(title = "Top States with Highest Crop Loss",
       x = "State",
       y = "Total Crop Loss",
       fill = "Loss Type") +
  scale_fill_manual(values = c("Crop Loss" = "green")) +
  theme_minimal() +
  theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, hjust = 1))


combined_plot <- loss_bar_plot + closs_bar_plot

combined_plot



```

Interactive map for state-wise total economic loss including Property loss and Crop loss.

```{r, warning=FALSE}


 library(leaflet)
 library(dplyr)
 library(sf)
 library(usmap)
 library(maps)  

total_economic_impact_by_state <- aggregate(cbind(loss, closs) ~ state_full, data = tornado_economic_subset, sum) 
total_economic_impact_by_state$total_loss <- total_economic_impact_by_state$loss + total_economic_impact_by_state$closs

state_abbreviations <- data.frame(
  state_full = state.name,
  state_abbr = state.abb
)

total_economic_impact_by_state <- merge(total_economic_impact_by_state, state_abbreviations, by = "state_full")

us_states <- st_as_sf(map("state", plot = FALSE, fill = TRUE))

us_states1 <- st_make_valid(us_states)
us_states1$ID <- tolower(us_states1$ID)

total_economic_impact_by_state$state_full <- tolower(total_economic_impact_by_state$state_full)

us_states <- merge(us_states1, total_economic_impact_by_state, by.x = "ID", by.y = "state_full", all.x = TRUE)

leaflet(data = us_states) %>%
  addProviderTiles("CartoDB.Voyager") %>%
  addPolygons(
    fillColor = ~colorQuantile("YlOrRd", us_states$total_loss)(us_states$total_loss),
    fillOpacity = 0.7,
    highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE),
    label = ~paste(us_states$ID,
                   "Total Loss:", us_states$total_loss,
                   "Property Loss:", us_states$loss,
                   "Crop Loss:", us_states$closs)
  ) %>%
  addLegend(
    position = "bottomright",
    pal = colorQuantile("YlOrRd", us_states$tornado_count),
    values = us_states$total_loss,
    title = "Total Economic loss ",
    opacity = 0.7
  )

```

Iv. Interpret the results:

**Economic Impact Over Time**

The line plot visualizes the economic impact of tornadoes over the years, considering property losses (blue line), crop losses (green line), and total losses (red line). The y-axis is in log scale to handle the wide range of economic losses. From the plot, we can observe:

-   Property losses show a fluctuating pattern over the years, with some noticeable spikes.
-   Crop losses seem to vary, but there are years with significant increases.
-   The total economic impact follows a similar pattern to property losses.

**Economic Impact by State**

The bar plots highlight the top states with the highest property losses (blue bars) and crop losses (green bars). The states are ordered based on the severity of the losses. Interpretations include:

Top States with Highest Property Loss:

-   Texas, Tennessee, Ohio, Iowa, and Louisiana are among the states with the highest property losses.
-   The bar plot provides a clear comparison of the magnitude of property losses across these states.

Top States with Highest Crop Loss:

-   Mississippi, Georgia, Nebraska, North Dakota, and Minnesota are prominent in terms of crop losses.
-   The plot emphasizes the variability in crop losses among the top states.

**State-Wise Economic Impact on Interactive Map**

The interactive map provides a geospatial view of the total economic losses (including property and crop losses) across states. The color intensity on the map represents the total economic losses. Interpretations include:

-   Darker shades indicate higher total economic losses, offering a quick overview of the most affected states.
-   Hovering over each state provides detailed information on the total loss, property loss, and crop loss.

**Overall Interpretation**

-   The economic impact of tornadoes is substantial and varies across both time and geographic regions.
-   Certain states consistently experience higher losses, emphasizing the importance of regional resilience measures.
-   The combination of line plots, bar graphs, and an interactive map provides a comprehensive understanding of tornado-related economic impacts.

## Developing Shiny Application

**1. The Shiny application will be built to import and utilize the tornado data set.**

## Conclusion

Here, you want to summarize the main points of what you've learned from this investigation, in paragraph form.

The visualizations and analyses can aid policymakers, emergency res ponders, and researchers in making informed decisions to mitigate the economic impact of tornadoes.

## References

Tornadoes. (n.d.). NOAA National Severe Storms Laboratory. https://www.nssl.noaa.gov/research/tornadoes/ In-Text Citation: (Tornadoes, n.d.)

Storm Prediction Center Maps, Graphics, and Data Page. (n.d.). https://www.spc.noaa.gov/wcm/ In-Text Citation: (Storm Prediction Center Maps, Graphics, and Data Page, n.d.)
